Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Сайт доставки еды Star Burger\r\n\r\nЭто сайт сети ресторанов Star Burger. Здесь можно заказать превосходные бургеры с доставкой на дом.\r\n\r\n![скриншот сайта](https://dvmn.org/filer/canonical/1594651635/686/)\r\n\r\n\r\nСеть Star Burger объединяет несколько ресторанов, действующих под единой франшизой. У всех ресторанов одинаковое меню и одинаковые цены. Просто выберите блюдо из меню на сайте и укажите место доставки. Мы сами найдём ближайший к вам ресторан, всё приготовим и привезём.\r\n\r\nНа сайте есть три независимых интерфейса. Первый — это публичная часть, где можно выбрать блюда из меню, и быстро оформить заказ без регистрации и SMS.\r\n\r\nВторой интерфейс предназначен для менеджера. Здесь происходит обработка заказов. Менеджер видит поступившие новые заказы и первым делом созванивается с клиентом, чтобы подтвердить заказ. После оператор выбирает ближайший ресторан и передаёт туда заказ на исполнение. Там всё приготовят и сами доставят еду клиенту.\r\n\r\nТретий интерфейс — это админка. Преимущественно им пользуются программисты при разработке сайта. Также сюда заходит менеджер, чтобы обновить меню ресторанов Star Burger.\r\n\r\n## Как запустить dev-версию сайта\r\n\r\nДля запуска сайта нужно запустить **одновременно** бэкенд и фронтенд, в двух терминалах.\r\n\r\n### Как собрать бэкенд\r\n\r\nСкачайте код:\r\n```sh\r\ngit clone https://github.com/devmanorg/star-burger.git\r\n```\r\n\r\nПерейдите в каталог проекта:\r\n```sh\r\ncd star-burger\r\n```\r\n\r\n[Установите Python](https://www.python.org/), если этого ещё не сделали.\r\n\r\nПроверьте, что `python` установлен и корректно настроен. Запустите его в командной строке:\r\n```sh\r\npython --version\r\n```\r\n**Важно!** Версия Python должна быть не ниже 3.6.\r\n\r\nВозможно, вместо команды `python` здесь и в остальных инструкциях этого README придётся использовать `python3`. Зависит это от операционной системы и от того, установлен ли у вас Python старой второй версии. \r\n\r\nВ каталоге проекта создайте виртуальное окружение:\r\n```sh\r\npython -m venv venv\r\n```\r\nАктивируйте его. На разных операционных системах это делается разными командами:\r\n\r\n- Windows: `.\\venv\\Scripts\\activate`\r\n- MacOS/Linux: `source venv/bin/activate`\r\n\r\n\r\nУстановите зависимости в виртуальное окружение:\r\n```sh\r\npip install -r requirements.txt\r\n```\r\n\r\nОпределите переменную окружения `SECRET_KEY`. Создать файл `.env` в каталоге `star_burger/` и положите туда такой код:\r\n```sh\r\nSECRET_KEY=django-insecure-0if40nf4nf93n4\r\n```\r\n\r\nСоздайте файл базы данных SQLite и отмигрируйте её следующей командой:\r\n\r\n```sh\r\npython manage.py migrate\r\n```\r\n\r\nЗапустите сервер:\r\n\r\n```sh\r\npython manage.py runserver\r\n```\r\n\r\nОткройте сайт в браузере по адресу [http://127.0.0.1:8000/](http://127.0.0.1:8000/). Если вы увидели пустую белую страницу, то не пугайтесь, выдохните. Просто фронтенд пока ещё не собран. Переходите к следующему разделу README.\r\n\r\n### Собрать фронтенд\r\n\r\n**Откройте новый терминал**. Для работы сайта в dev-режиме необходима одновременная работа сразу двух программ `runserver` и `parcel`. Каждая требует себе отдельного терминала. Чтобы не выключать `runserver` откройте для фронтенда новый терминал и все нижеследующие инструкции выполняйте там.\r\n\r\n[Установите Node.js](https://nodejs.org/en/), если у вас его ещё нет.\r\n\r\nПроверьте, что Node.js и его пакетный менеджер корректно установлены. Если всё исправно, то терминал выведет их версии:\r\n\r\n```sh\r\nnodejs --version\r\n# v16.16.0\r\n# Если ошибка, попробуйте node:\r\nnode --version\r\n# v16.16.0\r\n\r\nnpm --version\r\n# 8.11.0\r\n```\r\n\r\nВерсия `nodejs` должна быть не младше `10.0` и не старше `16.16`. Лучше ставьте `16.16.0`, её мы тестировали. Версия `npm` не важна. Как обновить Node.js читайте в статье: [How to Update Node.js](https://phoenixnap.com/kb/update-node-js-version).\r\n\r\nПерейдите в каталог проекта и установите пакеты Node.js:\r\n\r\n```sh\r\ncd star-burger\r\nnpm ci --dev\r\n```\r\n\r\nКоманда `npm ci` создаст каталог `node_modules` и установит туда пакеты Node.js. Получится аналог виртуального окружения как для Python, но для Node.js.\r\n\r\nПомимо прочего будет установлен [Parcel](https://parceljs.org/) — это упаковщик веб-приложений, похожий на [Webpack](https://webpack.js.org/). В отличии от Webpack он прост в использовании и совсем не требует настроек.\r\n\r\nТеперь запустите сборку фронтенда и не выключайте. Parcel будет работать в фоне и следить за изменениями в JS-коде:\r\n\r\n```sh\r\n./node_modules/.bin/parcel watch bundles-src/index.js --dist-dir bundles --public-url=\"./\"\r\n```\r\n\r\nЕсли вы на Windows, то вам нужна та же команда, только с другими слешами в путях:\r\n\r\n```sh\r\n.\\node_modules\\.bin\\parcel watch bundles-src/index.js --dist-dir bundles --public-url=\"./\"\r\n```\r\n\r\nДождитесь завершения первичной сборки. Это вполне может занять 10 и более секунд. О готовности вы узнаете по сообщению в консоли:\r\n\r\n```\r\n✨  Built in 10.89s\r\n```\r\n\r\nParcel будет следить за файлами в каталоге `bundles-src`. Сначала он прочитает содержимое `index.js` и узнает какие другие файлы он импортирует. Затем Parcel перейдёт в каждый из этих подключенных файлов и узнает что импортируют они. И так далее, пока не закончатся файлы. В итоге Parcel получит полный список зависимостей. Дальше он соберёт все эти сотни мелких файлов в большие бандлы `bundles/index.js` и `bundles/index.css`. Они полностью самодостаточны, и потому пригодны для запуска в браузере. Именно эти бандлы сервер отправит клиенту.\r\n\r\nТеперь если зайти на страницу  [http://127.0.0.1:8000/](http://127.0.0.1:8000/), то вместо пустой страницы вы увидите:\r\n\r\n![](https://dvmn.org/filer/canonical/1594651900/687/)\r\n\r\nКаталог `bundles` в репозитории особенный — туда Parcel складывает результаты своей работы. Эта директория предназначена исключительно для результатов сборки фронтенда и потому исключёна из репозитория с помощью `.gitignore`.\r\n\r\n**Сбросьте кэш браузера <kbd>Ctrl-F5</kbd>.** Браузер при любой возможности старается кэшировать файлы статики: CSS, картинки и js-код. Порой это приводит к странному поведению сайта, когда код уже давно изменился, но браузер этого не замечает и продолжает использовать старую закэшированную версию. В норме Parcel решает эту проблему самостоятельно. Он следит за пересборкой фронтенда и предупреждает JS-код в браузере о необходимости подтянуть свежий код. Но если вдруг что-то у вас идёт не так, то начните ремонт со сброса браузерного кэша, жмите <kbd>Ctrl-F5</kbd>.\r\n\r\n\r\n## Как запустить prod-версию сайта\r\n\r\nСобрать фронтенд:\r\n\r\n```sh\r\n./node_modules/.bin/parcel build bundles-src/index.js --dist-dir bundles --public-url=\"./\"\r\n```\r\n\r\nНастроить бэкенд: создать файл `.env` в каталоге `star_burger/` со следующими настройками:\r\n\r\n- `DEBUG` — дебаг-режим. Поставьте `False`.\r\n- `SECRET_KEY` — секретный ключ проекта. Он отвечает за шифрование на сайте. Например, им зашифрованы все пароли на вашем сайте.\r\n- `ALLOWED_HOSTS` — [см. документацию Django](https://docs.djangoproject.com/en/3.1/ref/settings/#allowed-hosts)\r\n\r\n## Цели проекта\r\n\r\nКод написан в учебных целях — это урок в курсе по Python и веб-разработке на сайте [Devman](https://dvmn.org). За основу был взят код проекта [FoodCart](https://github.com/Saibharath79/FoodCart).\r\n\r\nГде используется репозиторий:\r\n\r\n- Второй и третий урок [учебного курса Django](https://dvmn.org/modules/django/)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 44f1ee2dfe6ea87f4b3e8432ec4ad54b6c6d586d)
+++ b/README.md	(date 1743705946344)
@@ -4,7 +4,6 @@
 
 ![скриншот сайта](https://dvmn.org/filer/canonical/1594651635/686/)
 
-
 Сеть Star Burger объединяет несколько ресторанов, действующих под единой франшизой. У всех ресторанов одинаковое меню и одинаковые цены. Просто выберите блюдо из меню на сайте и укажите место доставки. Мы сами найдём ближайший к вам ресторан, всё приготовим и привезём.
 
 На сайте есть три независимых интерфейса. Первый — это публичная часть, где можно выбрать блюда из меню, и быстро оформить заказ без регистрации и SMS.
@@ -20,11 +19,13 @@
 ### Как собрать бэкенд
 
 Скачайте код:
+
 ```sh
 git clone https://github.com/devmanorg/star-burger.git
 ```
 
 Перейдите в каталог проекта:
+
 ```sh
 cd star-burger
 ```
@@ -32,29 +33,34 @@
 [Установите Python](https://www.python.org/), если этого ещё не сделали.
 
 Проверьте, что `python` установлен и корректно настроен. Запустите его в командной строке:
+
 ```sh
 python --version
 ```
+
 **Важно!** Версия Python должна быть не ниже 3.6.
 
-Возможно, вместо команды `python` здесь и в остальных инструкциях этого README придётся использовать `python3`. Зависит это от операционной системы и от того, установлен ли у вас Python старой второй версии. 
+Возможно, вместо команды `python` здесь и в остальных инструкциях этого README придётся использовать `python3`. Зависит это от операционной системы и от того, установлен ли у вас Python старой второй версии.
 
 В каталоге проекта создайте виртуальное окружение:
+
 ```sh
 python -m venv venv
 ```
+
 Активируйте его. На разных операционных системах это делается разными командами:
 
 - Windows: `.\venv\Scripts\activate`
 - MacOS/Linux: `source venv/bin/activate`
 
-
 Установите зависимости в виртуальное окружение:
+
 ```sh
 pip install -r requirements.txt
 ```
 
 Определите переменную окружения `SECRET_KEY`. Создать файл `.env` в каталоге `star_burger/` и положите туда такой код:
+
 ```sh
 SECRET_KEY=django-insecure-0if40nf4nf93n4
 ```
@@ -133,7 +139,6 @@
 
 **Сбросьте кэш браузера <kbd>Ctrl-F5</kbd>.** Браузер при любой возможности старается кэшировать файлы статики: CSS, картинки и js-код. Порой это приводит к странному поведению сайта, когда код уже давно изменился, но браузер этого не замечает и продолжает использовать старую закэшированную версию. В норме Parcel решает эту проблему самостоятельно. Он следит за пересборкой фронтенда и предупреждает JS-код в браузере о необходимости подтянуть свежий код. Но если вдруг что-то у вас идёт не так, то начните ремонт со сброса браузерного кэша, жмите <kbd>Ctrl-F5</kbd>.
 
-
 ## Как запустить prod-версию сайта
 
 Собрать фронтенд:
Index: coding.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/coding.py b/coding.py
new file mode 100644
--- /dev/null	(date 1744829832305)
+++ b/coding.py	(date 1744829832305)
@@ -0,0 +1,9 @@
+import json
+
+# Читаем данные из файла с кодировкой Windows-1251
+with open('data.json', 'r', encoding='windows-1251') as f:
+    data = json.load(f)
+
+# Сохраняем данные в новый файл с кодировкой UTF-8
+with open('data.json', 'w', encoding='utf-8') as f_fixed:
+    json.dump(data, f_fixed, ensure_ascii=False, indent=2)
